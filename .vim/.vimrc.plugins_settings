"------------------------------------
" vimshell
"------------------------------------
let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
let g:vimshell_right_prompt = 'vimshell#vcs#info("(%s)-[%b]", "(%s)-[%b|%a]")'
let g:vimshell_enable_smart_case = 1

if has('win32') || has('win64')
  " Display user name on Windows.
  let g:vimshell_prompt = $USERNAME."% "
else
  " Display user name on Linux.
  let g:vimshell_prompt = $USER."% "
endif

" ------------------------------------
" grep.vim
"------------------------------------
" 検索外のディレクトリ、ファイルパターン
let Grep_Skip_Dirs = '.svn .git .hg .bzr __pycache__ log logs tmp temp'
let Grep_Skip_Files = '*.bak *~ .ctags .tags'

"------------------------------------
" NERD_commenter.vim
"------------------------------------
" コメントの間にスペースを空ける
let NERDSpaceDelims = 1
" \-wでコメントをトグル(NERD_commenter.vim)
let g:NERDCreateDefaultMappings = 0
nmap <Leader>w <Plug>NERDCommenterToggle
vmap <Leader>w <Plug>NERDCommenterToggle
" 未対応ファイルタイプのエラーメッセージを表示しない
let NERDShutUp=1

"------------------------------------
" taglist.Vim
"------------------------------------
" 関数一覧
set tags=/.tags
"set tags+=~/.tags
"let Tlist_Ctags_Cmd = '/Applications/MacVim.app/Contents/MacOS/ctags' " ctagsのパス
let Tlist_Show_One_File = 1               " 現在編集中のソースのタグしか表示しない
let Tlist_Exit_OnlyWindow = 1             " taglistのウィンドーが最後のウィンドーならばVimを閉じる
let Tlist_Use_Right_Window = 1            " 右側でtaglistのウィンドーを表示
let Tlist_Enable_Fold_Column = 1          " 折りたたみ
"let Tlist_Auto_Open = 1                   " 自動表示
let Tlist_Auto_Update = 1
let Tlist_WinWidth = 30
let g:tlist_php_settings = 'php;c:class;d:constant;f:function'
let g:tlist_javascript_settings = 'javascript;c:class;m:method;f:function'
nnoremap <F5> :CMiniBufExplorer<CR>:TlistToggle<CR>:TMiniBufExplorer<CR>

"------------------------------------
" MiniBufExplorer
"------------------------------------
nnoremap <F4> :CMiniBufExplorer<CR>:TMiniBufExplorer<CR>

"------------------------------------
" NERDTree
"------------------------------------
let g:NERDTreeShowHidden=1
let g:NERDTreeIgnore=['\.swp$', '\.tags', '\.git$', '__pycache__', '\.cache', '\.idea']
nnoremap <F2> :NERDTreeToggle<CR>
nnoremap <F3> :NERDTreeFind<CR>
let file_name = expand("%:p")
if has('vim_starting') &&  file_name == ""
    autocmd VimEnter * execute 'NERDTree ./'
endif
let g:NERDTreeWinSize=36

"------------------------------------
" vim-indent-guides
"------------------------------------
nnoremap <F6> :IndentGuidesToggle<CR>
let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level = 4
let g:indent_guides_guide_size = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
if 'dark' == &background
    hi IndentGuidesOdd  ctermbg=black
    hi IndentGuidesEven ctermbg=darkgrey
else
    hi IndentGuidesOdd  ctermbg=white
    hi IndentGuidesEven ctermbg=lightgrey
endif

"------------------------------------
" ref.vim
"------------------------------------
let g:ref_alc_start_linenumber = 20 " 表示する行数
let g:ref_alc_encoding = 'UTF-8' " 文字化けするならここで文字コードを指定してみる
" webdictサイトの設定
let g:ref_source_webdict_sites = {
\   'je': {
\     'url': 'http://dictionary.infoseek.ne.jp/jeword/%s',
\   },
\   'ej': {
\     'url': 'http://dictionary.infoseek.ne.jp/ejword/%s',
\   },
\   'wiki': {
\     'url': 'http://ja.wikipedia.org/wiki/%s',
\   },
\   'syn': {
\     'url': 'http://www.thesaurus.com/browse/%s?s=t',
\   }
\ }
let g:ref_source_webdict_sites.default = 'ej' " デフォルトサイト
" 出力に対するフィルタ。最初の数行を削除
function! g:ref_source_webdict_sites.je.filter(output)
  return join(split(a:output, "\n")[15 :], "\n")
endfunction
function! g:ref_source_webdict_sites.ej.filter(output)
  return join(split(a:output, "\n")[15 :], "\n")
endfunction
function! g:ref_source_webdict_sites.wiki.filter(output)
  return join(split(a:output, "\n")[17 :], "\n")
endfunction
" キーマップ
nnoremap <Leader>de :<C-u>Ref webdict je<Space>
nnoremap <Leader>dj :<C-u>Ref webdict ej<Space>
nnoremap <Leader>dw :<C-u>Ref webdict wiki<Space>

"------------------------------------
" vim-go
"------------------------------------
let g:go_bin_path = expand($GOPATH."/bin")
let g:go_fmt_fail_silently = 1
let g:go_fmt_autosave = 0
let g:go_disable_autoinstall = 1

"------------------------------------
" quickrun
"------------------------------------
let g:quickrun_config={}
let g:quickrun_config = {
\ '_': {
\  "output_encode" : "utf-8",
\  "outputter" : 'error',
\  "outputter/error/success" : "buffer",
\  "outputter/error/error"   : "quickfix",
\  "outputter/buffer/split"  : ":rightbelow 8sp",
\  "outputter/buffer/close_on_empty" : 1,
\  "runner" : "vimproc",
\  "runner/vimproc/updatetime" : 60,
\ },
\ "cs": {
\  "command": "dmcs",
\  "exec": ["%c %o %s -out:%s:p:r.exe", "mono %s:p:r.exe %a", "rm -f %s:p:r.exe"],
\  "tempfile": "%{tempname()}.cs",
\ },
\}
let g:quickrun_config["opengl"] = {
\  "command" : "gcc",
\  "cmdopt" : "-framework GLUT -framework OpenGL",
\  "exec": ["%c %o %s -o %s:p:r", "%s:p:r %a"],
\}

" <C-c> で実行を強制終了させる
" quickrun.vim が実行していない場合には <C-c> を呼び出す
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"

